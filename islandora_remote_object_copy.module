<?php

/**
 * Implements hook_menu().
 */
function islandora_remote_object_copy_menu() {
  $items = array();

  $items['admin/config/development/islandora-remote-object-copy-settings'] = array(
    'title' => 'Islandora Remote Object Copy Settings',
    'description' => 'Settings for the Islandora Remote Object Copy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_remote_object_copy_copy_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/development/islandora-remote-object-copy-single'] = array(
    'title' => 'Islandora Remote Object Copy Single',
    'description' => 'Copy a remote fedora object into your islandora fedora.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_remote_object_copy_copy_single'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/development/islandora-remote-object-copy-collection'] = array(
    'title' => 'Islandora Remote Object Copy Collection',
    'description' => 'Copy records from a collection.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_remote_object_copy_copy_collection'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Settings form for Remote Object Copy.
 */
function islandora_remote_object_copy_copy_settings($form, &$form_state) {
  $form['islandora_remote_object_copy_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Fedora URL'),
    '#required' => TRUE,
    '#default_value' => variable_get('islandora_remote_object_copy_uri', ''),
  );

  $form['islandora_remote_object_copy_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Fedora Username'),
    '#required' => TRUE,
    '#default_value' => variable_get('islandora_remote_object_copy_username', ''),
  );

  $form['islandora_remote_object_copy_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Fedora Password'),
    '#required' => TRUE,
    '#default_value' => variable_get('islandora_remote_object_copy_password', ''),
  );

  return system_settings_form($form);
}

/**
 * Form to copy collection from remote fedora repo.
 */
function islandora_remote_object_copy_copy_collection($form, &$form_state) {
  $form['collection'] = array(
    '#type' => 'textfield',
    '#title' => t('Collection'),
    '#description' => t('Collection from which to copy objects over'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Submits Form to copy collection from remote fedora repo.
 */
function islandora_remote_object_copy_copy_collection_submit($form, &$form_state) {
  $values = $form_state['values'];
  $url = variable_get('islandora_remote_object_copy_uri', '');
  $fedora_account = new stdClass();
  $fedora_account->user = variable_get('islandora_remote_object_copy_username', '');
  $fedora_account->pass = variable_get('islandora_remote_object_copy_password', '');
  $collection_pid = $values['collection'];

  $children = islandora_remote_object_copy_get_collection_children($url, $fedora_account, $collection_pid);

  $batch = array(
    'operations' => array(),
    'finished' => 'islandora_remote_object_copy_batch_copy_collection_finished',
    'title' => t('Importing collection...'),
    'init_message' => t('Preparing to import collection...'),
    'progress_message' => t('Importing collection...'),
    'error_message' => t('Collection could not be imported.'),
  );

  foreach ($children as $child) {
    $batch['operations'][] = array(
      'islandora_remote_object_copy_batch_copy_collection_object', array(
        $url,
        $fedora_account,
        $collection_pid,
        $child,
      ),
    );
  }

  batch_set($batch);
}

/**
 * Batch function for finishing collection copy.
 */
function islandora_remote_object_copy_batch_copy_collection_finished() {
  drupal_set_message(t('Successfully imported collection!'));
}

/**
 * Primary copy form.
 */
function islandora_remote_object_copy_copy_single($form, &$form_state) {
  $form['parent_collection'] = array(
    '#type' => 'textfield',
    '#title' => t('Parent Collection'),
    '#description' => t('Parent collection to attach object to.'),
    '#required' => TRUE,
  );

  $form['fedora_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Fedora Pid'),
    '#description' => t('The Fedora Pid to look for and copy over.'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Submits single object copy form.
 */
function islandora_remote_object_copy_copy_single_submit($form, &$form_state) {
  $values = $form_state['values'];
  $url = variable_get('islandora_remote_object_copy_uri', '');
  $fedora_account = new stdClass();
  $fedora_account->user = variable_get('islandora_remote_object_copy_username', '');
  $fedora_account->pass = variable_get('islandora_remote_object_copy_password', '');
  $parent_collection = $values['parent_collection'];
  $fedora_pid = $values['fedora_pid'];
  islandora_remote_object_copy_copy_single_object($url, $fedora_account, $parent_collection, $fedora_pid);
}

/**
 * Returns all children that belong to a fedora collection.
 */
function islandora_remote_object_copy_get_collection_children($url, $fedora_account, $collection_pid) {
  module_load_include('inc', 'islandora', 'includes/tuque');
  module_load_include('inc', 'islandora', 'includes/tuque_wrapper');
  module_load_include('inc', 'islandora_remote_object_copy', 'includes/UncachedFedoraRepository');
  module_load_include('inc', 'islandora_compound_object', 'includes/manage.form');

  $connection = new RepositoryConnection($url, $fedora_account->user, $fedora_account->pass);
  $api = new FedoraApi($connection);
  $repository = new UncachedFedoraRepository($api, new SimpleCache());
  $fedora_object = $repository->getObject($collection_pid);
  $children = islandora_basic_collection_get_member_objects($fedora_object, 0, 10000, 'manage');
  $collection_children = array();
  foreach ($children as $child) {
    if (is_array($child)) {
      foreach ($child as $child_object) {
        $collection_children[] = $child_object['object']['value'];
      }
    }
  }
  return $collection_children;
}

/**
 * Wrapper function to copy single object.
 */
function islandora_remote_object_copy_batch_copy_collection_object($url, $fedora_account, $parent_collection, $fedora_pid, &$context) {
  islandora_remote_object_copy_copy_single_object($url, $fedora_account, $parent_collection, $fedora_pid);
}

/**
 * Copies single object from secondary fedora repository to primary fedora repository.
 */
function islandora_remote_object_copy_copy_single_object($url, $fedora_account, $parent_collection, $fedora_pid) {
  @set_time_limit(3600*6);
  @ini_set('memory_limit', -1);
  module_load_include('inc', 'islandora', 'includes/tuque');
  module_load_include('inc', 'islandora', 'includes/tuque_wrapper');
  module_load_include('inc', 'islandora_remote_object_copy', 'includes/UncachedFedoraRepository');
  module_load_include('inc', 'islandora_compound_object', 'includes/manage.form');

  $connection = new RepositoryConnection($url, $fedora_account->user, $fedora_account->pass);
  $api = new FedoraApi($connection);
  $repository = new UncachedFedoraRepository($api, new SimpleCache());
  $fedora_object = $repository->getObject($fedora_pid);
  $compound = FALSE;
  $collection = _islandora_remote_object_copy_object_is_collection($fedora_object);
  if ($collection) {
    islandora_remote_object_copy_create_collection($fedora_object, $parent_collection);
    return;
  }
  if ($fedora_object['RELS-INT']) {
    $compound = _islandora_remote_object_copy_object_has_unique_datastreams($fedora_object);
  }
  if ($compound) {
    $islandora_object = islandora_remote_object_copy_create_compound_object($fedora_object, $parent_collection);
    drupal_set_message(t('Created Islandora Object @islandora_object', array('@islandora_object' => $islandora_object->id)));
    $counter = 1;
    $context = array();
    foreach ($fedora_object as $datastream) {
      $child_object = islandora_remote_object_copy_create_single_object_item($datastream, $fedora_object, $parent_collection, FALSE);
      if (!empty($child_object)) {
        $rels_predicate = variable_get('islandora_compound_object_relationship', 'isConstituentOf');
        $child_object->relationships->add('info:fedora/fedora-system:def/relations-external#', $rels_predicate, $islandora_object->id);
        islandora_compound_object_update_sequence($islandora_object->id, $child_object->id, $counter, $context);

        $counter++;
        drupal_set_message(t('Created Child Islandora Object @islandora_object', array('@islandora_object' => $child_object->id)));
      }
    }
  }
  else {
    foreach ($fedora_object as $datastream) {
      $islandora_object = islandora_remote_object_copy_create_single_object_item($datastream, $fedora_object, $parent_collection, TRUE);
      drupal_set_message(t('Created Islandora Object @islandora_object', array('@islandora_object' => $islandora_object->id)));
    }
  }
}

/**
 * Checks if fedora object is collection.
 */
function _islandora_remote_object_copy_object_is_collection($fedora_object) {
  if (!empty($fedora_object['COLLECTION_POLICY'])) {
    foreach ($fedora_object->models as $model) {
      if (strpos($model, 'collection') !== FALSE) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Creates new fedora collection.
 */
function islandora_remote_object_copy_create_collection($fedora_object, $parent_collection) {
  $object_properties = array(
    'state',
    'createdDate',
    'lastModifiedDate',
    'label',
    'owner',
    'logMessage',
  );
  $content_models = array(
    'islandora:collectionCModel',
    'fedora-system:FedoraObject-3.0',
  );
  $datastreams = array(
    'MODS',
    'DC',
    'POLICY',
    'COLLECTION_POLICY',
  );

  $islandora_object = islandora_object_load($fedora_object->id);
  if (!empty($islandora_object)) {
    return;
  }
  $islandora_object = $parent_collection->repository->constructObject($fedora_object->id);
  $islandora_object->id = $fedora_object->id;
  foreach ($object_properties as $property) {
    if (isset($fedora_object->$property)) {
      $islandora_object->$property = $fedora_object->$property;
    }
  }
  foreach ($content_models as $content_model) {
    $islandora_object->relationships->add(FEDORA_MODEL_URI, 'hasModel', $content_model);
  }
  $islandora_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $parent_collection);
  foreach ($datastreams as $datastream) {
    if ($fedora_object[$datastream]) {
      if ($datastream == 'COLLECTION_POLICY') {
        $parent_collection_object = islandora_object_load($parent_collection);
        $fedora_ds = $parent_collection[$datastream];
      }
      else {
        $fedora_ds = $fedora_object[$datastream];
      }
      $ds = $islandora_object->constructDatastream($datastream);
      $ds->label = $fedora_ds->label;
      $ds->mimetype = $fedora_ds->mimetype;
      $ds->control_group = 'M';
      $ds->setContentFromString($fedora_ds->content);
      $islandora_object->ingestDatastream($ds);
    }
  }
  islandora_add_object($islandora_object);
}

/**
 * Creates compound object.
 */
function islandora_remote_object_copy_create_compound_object($fedora_object, $parent_collection) {
  $tuque = islandora_get_tuque_connection();
  $islandora_object = islandora_object_load($fedora_object->id);
  $object_properties = array(
    'state',
    'createdDate',
    'lastModifiedDate',
    'label',
    'owner',
    'logMessage',
  );
  $content_models = array(
    'islandora:compoundCModel',
    'fedora-system:FedoraObject-3.0',
  );
  $datastreams = array(
    'MODS',
    'DC',
    'TN',
    'POLICY',
  );
  if (empty($islandora_object)) {
    $islandora_object = $tuque->repository->constructObject($fedora_object->id);
    foreach ($object_properties as $property) {
      if (isset($fedora_object->$property)) {
        $islandora_object->$property = $fedora_object->$property;
      }
    }
    foreach ($content_models as $content_model) {
      $islandora_object->relationships->add(FEDORA_MODEL_URI, 'hasModel', $content_model);
    }
    $islandora_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $parent_collection);
    foreach ($datastreams as $datastream) {
      if ($fedora_object[$datastream]) {
        $fedora_ds = $fedora_object[$datastream];
        $ds = $islandora_object->constructDatastream($datastream);
        $ds->label = $fedora_ds->label;
        $ds->mimetype = $fedora_ds->mimetype;
        $ds->control_group = 'M';
        $ds->setContentFromString($fedora_ds->content);
        $islandora_object->ingestDatastream($ds);
      }
    }
    islandora_add_object($islandora_object);
  }
  else {
    drupal_set_message('object exists' . $fedora_object->id);
  }
  return $islandora_object;
}

/**
 * Creates compound object item.
 */
function islandora_remote_object_copy_create_single_object_item($fedora_object_datastream, $fedora_object, $parent_collection, $keep_id = FALSE) {
  $tuque = islandora_get_tuque_connection();
  $fedora_datastream = $fedora_object[$fedora_object_datastream->id];
  $islandora_child_object = NULL;

  $content_info = _islandora_remote_object_copy_get_content_info($fedora_object, $fedora_datastream);

  if (!empty($content_info)) {
    $content_models = $content_info['content_models'];
    $content_datastream = $content_info['content_datastream'];
    $namespace = explode(':', $fedora_object->id);
    $content_models[] = 'fedora-system:FedoraObject-3.0';
    $object_properties = array(
      'state',
      'createdDate',
      'lastModifiedDate',
      'owner',
      'logMessage',
    );
    $datastreams = array(
      'MODS',
      'DC',
      'POLICY',
    );
    if ($keep_id) {
      $islandora_child_object = $tuque->repository->constructObject($fedora_object->id);
    } else {
      $islandora_child_object = $tuque->repository->constructObject($namespace[0]);
    }
    $islandora_child_object->label = $fedora_datastream->label;
    foreach ($object_properties as $property) {
      if (isset($fedora_object->$property)) {
        $islandora_child_object->$property = $fedora_object->$property;
      }
    }
    foreach ($content_models as $content_model) {
      $islandora_child_object->relationships->add(FEDORA_MODEL_URI, 'hasModel', $content_model);
    }
    $islandora_child_object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $parent_collection);
    foreach ($datastreams as $datastream) {
      if ($fedora_object[$datastream]) {
        $fedora_ds = $fedora_object[$datastream];
        $ds = $islandora_child_object->constructDatastream($datastream);
        $ds->label = $fedora_ds->label;
        $ds->mimetype = $fedora_ds->mimetype;
        $ds->control_group = 'M';
        $ds->setContentFromString($fedora_ds->content);
        $islandora_child_object->ingestDatastream($ds);
      }
    }
    $ds = $islandora_child_object->constructDatastream($content_datastream);
    $ds->label = $fedora_datastream->label;
    $ds->mimetype = $fedora_datastream->mimetype;
    $ds->control_group = 'M';
    $ds->setContentFromString($fedora_datastream->content);
    $islandora_child_object->ingestDatastream($ds);
    islandora_add_object($islandora_child_object);
  }
  return $islandora_child_object;
}

function _islandora_remote_object_copy_object_has_unique_datastreams($fedora_object) {
  $rels_int = $fedora_object['RELS-INT']->content;
  $counter = 0;
  foreach ($fedora_object as $datastream) {
    if ($datastream->id == 'TN') {
      continue;
    }
    if (strpos($rels_int, 'rdf:about="info:fedora/' . $fedora_object->id . '/' . $datastream->id) !== FALSE) {
      $counter++;
    }
  }
  if ($counter > 1) {
    return true;
  }
  return false;
}

/**
 * Returns the content models and datastream associated with a datastream.
 */
function _islandora_remote_object_copy_get_content_info($fedora_object, $fedora_datastream) {
  $mime_type = NULL;
  $content_info = NULL;
  if (!empty($fedora_object['RELS-INT'])) {
    $xml = $fedora_object['RELS-INT']->content;
    if (strpos($xml, 'rdf:about="info:fedora/' . $fedora_object->id . '/' . $fedora_datastream->id) !== FALSE) {
      $mime_type = $fedora_datastream->mimetype;
    }
  }

  $mime_type_mapping = array(
    'islandora:sp_pdf' => array(
      'application/pdf',
    ),
    'islandora:sp-audioCModel' => array(
      'audio/mpeg',
      'audio/x-mpeg',
      'audio/wav',
      'audio/x-wav',
      'audio/vnd.wave',
    ),
    'islandora:sp_basic_image' => array(
      'image/gif',
      'image/jpeg',
      'image/png',
    ),
    'islandora:sp_large_image_cmodel' => array(
      'image/tiff',
      'image/tif',
    ),
    'islandora:sp_videoCModel' => array(
      'video/mp4',
      'video/mpeg',
      'video/quicktime',
      'video/x-ms-wmv',
    ),
  );
  // PDF Object.
  if (in_array($mime_type, $mime_type_mapping['islandora:sp_pdf'])) {
    $content_info = array(
      'content_models' => array(
        'islandora:sp_pdf',
      ),
      'content_datastream' => 'OBJ',
    );
  }
  // Audio Object.
  if (in_array($mime_type, $mime_type_mapping['islandora:sp-audioCModel'])) {
    $content_info = array(
      'content_models' => array(
        'islandora:sp-audioCModel',
      ),
      'content_datastream' => 'OBJ',
    );
  }
  // Image Object.
  if (in_array($mime_type, $mime_type_mapping['islandora:sp_basic_image']) && $fedora_datastream->id !== 'TN') {
    $content_info = array(
      'content_models' => array(
        'islandora:sp_basic_image',
      ),
      'content_datastream' => 'OBJ',
    );
  }
  // Large Image Object.
  if (in_array($mime_type, $mime_type_mapping['islandora:sp_large_image_cmodel'])) {
    $content_info = array(
      'content_models' => array(
        'islandora:sp_large_image_cmodel',
      ),
      'content_datastream' => 'OBJ',
    );
  }

  // Video Object.
  if (in_array($mime_type, $mime_type_mapping['islandora:sp_videoCModel'])) {
    $content_info = array(
      'content_models' => array(
        'islandora:sp_videoCModel',
      ),
      'content_datastream' => 'OBJ',
    );
  }
  if (!empty($mime_type) && $fedora_datastream->id !== 'TN' && empty($content_info)) {
    drupal_set_message(t("Datastream %datastream of type @type could not be mapped for @fedora_id", array('%datastream' => $fedora_datastream->id, '@type' => $mime_type, '@fedora_id' => $fedora_object->id)));
  }
  return $content_info;
}
